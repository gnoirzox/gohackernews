package [[ .fragmenta_resource ]]actions

import (
	"net/http"

	"github.com/fragmenta/auth/can"
	"github.com/fragmenta/mux"
	"github.com/fragmenta/server"
	"github.com/fragmenta/view"

	"github.com/kennygrant/gohackernews/src/lib/session"
	"github.com/kennygrant/gohackernews/src/[[ .fragmenta_resources ]]"
)

// HandleShow displays a single [[ .fragmenta_resource ]].
func HandleShow(w http.ResponseWriter, r *http.Request) error {

	// Fetch the  params
	params, err := mux.Params(r)
	if err != nil {
		return server.InternalError(err)
	}
	
	// Find the [[ .fragmenta_resource ]]
	[[ .fragmenta_resource ]], err := [[ .fragmenta_resources ]].Find(params.GetInt([[ .fragmenta_resources ]].KeyName))
	if err != nil {
		return server.NotFoundError(err)
	}

	// Authorise access
	err = can.Show([[ .fragmenta_resource ]], session.CurrentUser(w, r))
	if err != nil {
		return server.NotAuthorizedError(err)
	}

	// Render the template
	view := view.NewRenderer(w, r)
	view.CacheKey([[ .fragmenta_resource ]].CacheKey())
	view.AddKey("[[ .fragmenta_resource ]]", [[ .fragmenta_resource ]])
	return view.Render()
}
